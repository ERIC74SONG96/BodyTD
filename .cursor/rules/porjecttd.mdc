---
description: 
globs: 
alwaysApply: true
---
 ---
description: BodyTD Basic Rules and Development Process
globs: ["**/*.kt"]
alwaysApply: false
---

# Task: Develop a Tower Defense game in Kotlin with Android Studio
## Requirements:
### 1. Gameplay Mechanics
- The player places towers along a predefined path to prevent enemies from reaching the end
- Each tower has unique attributes (range, attack speed, attack type)
- Enemies follow a predefined path from start to finish
- Defeating enemies earns money, allowing tower purchases and upgrades
- The game is lost if 3 enemies successfully reach the end of the path

### 2. Object-Oriented Architecture
- Inheritance: Use a base class for towers and enemies, allowing specialized behaviors.
- Interfaces & Polymorphism: Define attack behaviors for towers and movement patterns for enemies.
- Composition & Aggregation: Structure interactions between game elements (towers, enemies, game engine).
- Observer Pattern: Implement event handling where it might be needed.
- Encapsulation: Use private/protected properties to secure critical game attributes.
- 2 Additional Design Patterns, e.g.: 
  - Singleton: Manage game resources globally.
  - Factory Pattern: Generate enemy instances dynamically.
Any other design pattern is fine if better but always justify why.

### 3. User Interface & Features
- Very Basic UI: Tower placement, resource display, remaining lives, no Menu Screen.
- Graphics: Use Canvas, Jetpack Compose or the most appropriate technology for rendering as long it's not losing the OO learning experience driven approach.
- User Input: Allow tower placement and upgrades.

### 4. Evaluation & Presentation
- Ensure code clarity and adherence to SOLID principles!!!
- Always document the OOP concepts used/needed directly in code!
- Deliver a playable demo.

## Final Objective:
A well-structured Tower Defense game demonstrating mastery of object-oriented programming and design patterns in Kotlin.